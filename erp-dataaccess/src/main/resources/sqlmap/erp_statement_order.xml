<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxzl.erp.dataaccess.dao.mysql.statement.StatementOrderMapper">

	<resultMap id="StatementOrderDO" type="com.lxzl.erp.dataaccess.domain.statement.StatementOrderDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="statement_order_no" jdbcType="VARCHAR" property="statementOrderNo" />
		<result column="customer_id" jdbcType="INTEGER" property="customerId" />
		<result column="customer_name" jdbcType="VARCHAR" property="customerName" />
		<result column="customer_no" jdbcType="VARCHAR" property="customerNo" />
		<result column="statement_expect_pay_time" jdbcType="TIMESTAMP" property="statementExpectPayTime" />
		<result column="statement_amount" jdbcType="DECIMAL" property="statementAmount" />
		<result column="statement_other_amount" jdbcType="DECIMAL" property="statementOtherAmount" />
		<result column="statement_other_paid_amount" jdbcType="DECIMAL" property="statementOtherPaidAmount" />
		<result column="statement_rent_deposit_amount" jdbcType="DECIMAL" property="statementRentDepositAmount" />
		<result column="statement_rent_deposit_paid_amount" jdbcType="DECIMAL" property="statementRentDepositPaidAmount" />
		<result column="statement_rent_deposit_return_amount" jdbcType="DECIMAL" property="statementRentDepositReturnAmount" />
		<result column="statement_deposit_amount" jdbcType="DECIMAL" property="statementDepositAmount" />
		<result column="statement_deposit_paid_amount" jdbcType="DECIMAL" property="statementDepositPaidAmount" />
		<result column="statement_deposit_return_amount" jdbcType="DECIMAL" property="statementDepositReturnAmount" />
		<result column="statement_rent_amount" jdbcType="DECIMAL" property="statementRentAmount" />
		<result column="statement_rent_paid_amount" jdbcType="DECIMAL" property="statementRentPaidAmount" />
		<result column="statement_paid_time" jdbcType="TIMESTAMP" property="statementPaidTime" />
		<result column="statement_overdue_amount" jdbcType="DECIMAL" property="statementOverdueAmount" />
		<result column="statement_overdue_paid_amount" jdbcType="DECIMAL" property="statementOverduePaidAmount" />
		<result column="statement_status" jdbcType="INTEGER" property="statementStatus" />
		<result column="statement_start_time" jdbcType="TIMESTAMP" property="statementStartTime" />
		<result column="statement_end_time" jdbcType="TIMESTAMP" property="statementEndTime" />
		<result column="statement_correct_amount" jdbcType="DECIMAL" property="statementCorrectAmount" />
		<result column="data_status" jdbcType="INTEGER" property="dataStatus" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="create_user" jdbcType="VARCHAR" property="createUser" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="update_user" jdbcType="VARCHAR" property="updateUser" />
		<result column="owner" jdbcType="INTEGER" property="owner" />
		<result column="ownerName" jdbcType="VARCHAR" property="ownerName" />
		<result column="statement_coupon_amount" jdbcType="DECIMAL" property="statementCouponAmount" />
		<result column="statement_penalty_amount" jdbcType="DECIMAL" property="statementPenaltyAmount" />
		<result column="statement_penalty_paid_amount" jdbcType="DECIMAL" property="statementPenaltyPaidAmount" />
		<result column="ownerSubCompanyId" jdbcType="INTEGER" property="ownerSubCompanyId" />
		<result column="ownerSubCompanyName" jdbcType="VARCHAR" property="ownerSubCompanyName" />
		<collection property="statementOrderDetailDOList" resultMap="StatementOrderDetailDO" />
	</resultMap>

	<resultMap id="StatementOrderDetailDO" type="com.lxzl.erp.dataaccess.domain.statement.StatementOrderDetailDO">
		<id column="detail_id" jdbcType="INTEGER" property="id" />
		<result column="detail_statement_order_id" jdbcType="INTEGER" property="statementOrderId" />
		<result column="detail_customer_id" jdbcType="INTEGER" property="customerId" />
		<result column="detail_order_type" jdbcType="INTEGER" property="orderType" />
		<result column="detail_order_id" jdbcType="INTEGER" property="orderId" />
		<result column="detail_order_item_type" jdbcType="INTEGER" property="orderItemType" />
		<result column="detail_order_item_refer_id" jdbcType="INTEGER" property="orderItemReferId" />
		<result column="detail_return_refer_id" jdbcType="INTEGER" property="returnReferId" />
		<result column="detail_statement_detail_phase" jdbcType="INTEGER" property="statementDetailPhase" />
		<result column="detail_statement_detail_type" jdbcType="INTEGER" property="statementDetailType" />
		<result column="detail_statement_expect_pay_time" jdbcType="TIMESTAMP" property="statementExpectPayTime" />
		<result column="detail_statement_detail_amount" jdbcType="DECIMAL" property="statementDetailAmount" />
		<result column="detail_statement_detail_other_amount" jdbcType="DECIMAL" property="statementDetailOtherAmount" />
		<result column="detail_statement_detail_other_paid_amount" jdbcType="DECIMAL" property="statementDetailOtherPaidAmount" />
		<result column="detail_statement_detail_rent_deposit_amount" jdbcType="DECIMAL" property="statementDetailRentDepositAmount" />
		<result column="detail_statement_detail_rent_deposit_paid_amount" jdbcType="DECIMAL" property="statementDetailRentDepositPaidAmount" />
		<result column="detail_statement_detail_rent_deposit_return_amount" jdbcType="DECIMAL" property="statementDetailRentDepositReturnAmount" />
		<result column="detail_statement_detail_rent_deposit_return_time" jdbcType="TIMESTAMP" property="statementDetailRentDepositReturnTime" />
		<result column="detail_statement_detail_deposit_amount" jdbcType="DECIMAL" property="statementDetailDepositAmount" />
		<result column="detail_statement_detail_deposit_paid_amount" jdbcType="DECIMAL" property="statementDetailDepositPaidAmount" />
		<result column="detail_statement_detail_deposit_return_amount" jdbcType="DECIMAL" property="statementDetailDepositReturnAmount" />
		<result column="detail_statement_detail_deposit_return_time" jdbcType="TIMESTAMP" property="statementDetailDepositReturnTime" />
		<result column="detail_statement_detail_rent_amount" jdbcType="DECIMAL" property="statementDetailRentAmount" />
		<result column="detail_statement_detail_rent_paid_amount" jdbcType="DECIMAL" property="statementDetailRentPaidAmount" />
		<result column="detail_statement_detail_paid_time" jdbcType="TIMESTAMP" property="statementDetailPaidTime" />
		<result column="detail_statement_detail_overdue_amount" jdbcType="DECIMAL" property="statementDetailOverdueAmount" />
		<result column="detail_statement_detail_overdue_paid_amount" jdbcType="DECIMAL" property="statementDetailOverduePaidAmount" />
		<result column="detail_statement_detail_overdue_days" jdbcType="INTEGER" property="statementDetailOverdueDays" />
		<result column="detail_statement_detail_overdue_phase_count" jdbcType="INTEGER" property="statementDetailOverduePhaseCount" />
		<result column="detail_statement_detail_status" jdbcType="INTEGER" property="statementDetailStatus" />
		<result column="detail_statement_start_time" jdbcType="TIMESTAMP" property="statementStartTime" />
		<result column="detail_statement_end_time" jdbcType="TIMESTAMP" property="statementEndTime" />
		<result column="detail_statement_detail_correct_amount" jdbcType="DECIMAL" property="statementDetailCorrectAmount" />
		<result column="detail_data_status" jdbcType="INTEGER" property="dataStatus" />
		<result column="detail_remark" jdbcType="VARCHAR" property="remark" />
		<result column="detail_create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="detail_create_user" jdbcType="VARCHAR" property="createUser" />
		<result column="detail_update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="detail_update_user" jdbcType="VARCHAR" property="updateUser" />
		<result column="statement_coupon_amount" jdbcType="DECIMAL" property="statementCouponAmount" />
		<result column="statement_detail_penalty_amount" jdbcType="DECIMAL" property="statementDetailPenaltyAmount" />
		<result column="statement_detail_penalty_paid_amount" jdbcType="DECIMAL" property="statementDetailPenaltyPaidAmount" />
		<result column="relet_order_item_refer_id" jdbcType="INTEGER" property="reletOrderItemReferId"/>
	</resultMap>


	<resultMap id="CheckStatementOrderDO" type="com.lxzl.erp.dataaccess.domain.statement.CheckStatementOrderDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="statement_order_no" jdbcType="VARCHAR" property="statementOrderNo" />
		<result column="customer_id" jdbcType="INTEGER" property="customerId" />
		<result column="customer_name" jdbcType="VARCHAR" property="customerName" />
		<result column="customer_no" jdbcType="VARCHAR" property="customerNo" />
		<result column="statement_expect_pay_time" jdbcType="TIMESTAMP" property="statementExpectPayTime" />
		<result column="statement_amount" jdbcType="DECIMAL" property="statementAmount" />
		<result column="statement_other_amount" jdbcType="DECIMAL" property="statementOtherAmount" />
		<result column="statement_other_paid_amount" jdbcType="DECIMAL" property="statementOtherPaidAmount" />
		<result column="statement_rent_deposit_amount" jdbcType="DECIMAL" property="statementRentDepositAmount" />
		<result column="statement_rent_deposit_paid_amount" jdbcType="DECIMAL" property="statementRentDepositPaidAmount" />
		<result column="statement_rent_deposit_return_amount" jdbcType="DECIMAL" property="statementRentDepositReturnAmount" />
		<result column="statement_deposit_amount" jdbcType="DECIMAL" property="statementDepositAmount" />
		<result column="statement_deposit_paid_amount" jdbcType="DECIMAL" property="statementDepositPaidAmount" />
		<result column="statement_deposit_return_amount" jdbcType="DECIMAL" property="statementDepositReturnAmount" />
		<result column="statement_rent_amount" jdbcType="DECIMAL" property="statementRentAmount" />
		<result column="statement_rent_paid_amount" jdbcType="DECIMAL" property="statementRentPaidAmount" />
		<result column="statement_paid_time" jdbcType="TIMESTAMP" property="statementPaidTime" />
		<result column="statement_overdue_amount" jdbcType="DECIMAL" property="statementOverdueAmount" />
		<result column="statement_overdue_paid_amount" jdbcType="DECIMAL" property="statementOverduePaidAmount" />
		<result column="statement_status" jdbcType="INTEGER" property="statementStatus" />
		<result column="statement_start_time" jdbcType="TIMESTAMP" property="statementStartTime" />
		<result column="statement_end_time" jdbcType="TIMESTAMP" property="statementEndTime" />
		<result column="statement_correct_amount" jdbcType="DECIMAL" property="statementCorrectAmount" />
		<result column="data_status" jdbcType="INTEGER" property="dataStatus" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="create_user" jdbcType="VARCHAR" property="createUser" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="update_user" jdbcType="VARCHAR" property="updateUser" />
		<result column="owner" jdbcType="INTEGER" property="owner" />
		<result column="ownerName" jdbcType="VARCHAR" property="ownerName" />
		<result column="statement_coupon_amount" jdbcType="DECIMAL" property="statementCouponAmount" />
		<result column="statement_penalty_amount" jdbcType="DECIMAL" property="statementPenaltyAmount" />
		<result column="statement_penalty_paid_amount" jdbcType="DECIMAL" property="statementPenaltyPaidAmount" />
		<result column="monthTime" jdbcType="VARCHAR" property="monthTime" />
	</resultMap>

	<sql id="column_List">
		eso.id,eso.statement_order_no,eso.customer_id,eso.statement_expect_pay_time,eso.statement_amount,eso.statement_other_amount,eso.statement_other_paid_amount,eso.statement_rent_deposit_amount,eso.statement_rent_deposit_paid_amount,eso.statement_rent_deposit_return_amount,
		eso.statement_deposit_amount,eso.statement_deposit_paid_amount,eso.statement_deposit_return_amount,
		eso.statement_rent_amount,eso.statement_rent_paid_amount,eso.statement_paid_time,eso.statement_overdue_amount,eso.statement_overdue_paid_amount,eso.statement_status,eso.statement_start_time,eso.statement_end_time,eso.data_status,eso.remark,eso.create_time,eso.create_user,eso.update_time,eso.update_user,eso.statement_correct_amount,eso.statement_coupon_amount,eso.statement_penalty_amount as statement_penalty_amount,eso.statement_penalty_paid_amount as statement_penalty_paid_amount
	</sql>

	<sql id="detail_column_List">
		esod.id as detail_id,esod.statement_order_id as detail_statement_order_id,esod.customer_id as detail_customer_id,esod.order_type as detail_order_type,esod.order_id as detail_order_id ,
		esod.order_item_type as detail_order_item_type,esod.order_item_refer_id as detail_order_item_refer_id,esod.return_refer_id as detail_return_refer_id,esod.statement_detail_type as detail_statement_detail_type,esod.statement_detail_phase as detail_statement_detail_phase,esod.statement_expect_pay_time as detail_statement_expect_pay_time,
		esod.statement_detail_amount as detail_statement_detail_amount,esod.statement_detail_other_amount as detail_statement_detail_other_amount,esod.statement_detail_other_paid_amount as detail_statement_detail_other_paid_amount,esod.statement_detail_rent_deposit_amount as detail_statement_detail_rent_deposit_amount,esod.statement_detail_rent_deposit_paid_amount as detail_statement_detail_rent_deposit_paid_amount,
		esod.statement_detail_rent_deposit_return_amount as detail_statement_detail_rent_deposit_return_amount,esod.statement_detail_rent_deposit_return_time as detail_statement_detail_rent_deposit_return_time,esod.statement_detail_deposit_amount as detail_statement_detail_deposit_amount,esod.statement_detail_deposit_paid_amount as detail_statement_detail_deposit_paid_amount,esod.statement_detail_deposit_return_amount as detail_statement_detail_deposit_return_amount,esod.statement_detail_deposit_return_time as detail_statement_detail_deposit_return_time,
		esod.statement_detail_rent_amount as detail_statement_detail_rent_amount,esod.statement_detail_rent_paid_amount as detail_statement_detail_rent_paid_amount, esod.statement_detail_paid_time as detail_statement_detail_paid_time, esod.statement_detail_overdue_amount as detail_statement_detail_overdue_amount,esod.statement_detail_overdue_paid_amount as detail_statement_detail_overdue_paid_amount,esod.statement_detail_overdue_days as detail_statement_detail_overdue_days,esod.statement_detail_overdue_phase_count as detail_statement_detail_overdue_phase_count,esod.statement_detail_status as detail_statement_detail_status,esod.statement_start_time as detail_statement_start_time,esod.statement_end_time as detail_statement_end_time,esod.statement_detail_correct_amount as detail_statement_detail_correct_amount,esod.data_status as detail_data_status,esod.remark as detail_remark,esod.create_time as detail_create_time,esod.create_user as detail_create_user,esod.update_time as detail_update_time,
		esod.update_user as detail_update_user,esod.statement_coupon_amount as detail_statement_coupon_amount,esod.statement_detail_penalty_amount as statement_detail_penalty_amount,esod.statement_detail_penalty_paid_amount as statement_detail_penalty_paid_amount,esod.relet_order_item_refer_id as relet_order_item_refer_id
	</sql>

	<select id="findById" resultMap="StatementOrderDO" parameterType="java.lang.Integer">
		SELECT statement_main.*
		<trim prefix=",">
			<include refid="detail_column_List" />
		</trim>
		FROM
		(
			SELECT <include refid="column_List"/>
			<trim prefix=",">
				ec.customer_name AS customer_name
			</trim>
			<trim prefix=",">
				ec.customer_no AS customer_no
			</trim>
			FROM erp_statement_order eso
            INNER JOIN erp_customer ec ON eso.customer_id = ec.id
			WHERE eso.id = #{id, jdbcType=INTEGER} AND eso.data_status = 1
		) statement_main
		LEFT JOIN erp_statement_order_detail esod ON statement_main.id = esod.statement_order_id AND esod.data_status = 1
		ORDER BY esod.order_type ASC,esod.order_id ASC,statement_main.statement_expect_pay_time ASC,esod.statement_detail_phase ASC, esod.statement_expect_pay_time ASC
	</select>

	<select id="findByNo" resultMap="StatementOrderDO" parameterType="java.lang.String">
		SELECT statement_main.*
		<trim prefix=",">
			<include refid="detail_column_List" />
		</trim>
		FROM
		(
			SELECT <include refid="column_List"/>
			<trim prefix=",">
				ec.customer_name AS customer_name
			</trim>
			<trim prefix=",">
				ec.customer_no AS customer_no
			</trim>
			<trim prefix=",">
				owner_user.real_name AS ownerName
			</trim>
			FROM erp_statement_order eso
			INNER JOIN erp_customer ec ON eso.customer_id = ec.id
			LEFT JOIN  erp_user owner_user on ec.owner = owner_user.id
			WHERE eso.statement_order_no = #{statementOrderNo, jdbcType=INTEGER} AND eso.data_status = 1
		) statement_main
		LEFT JOIN erp_statement_order_detail esod ON statement_main.id = esod.statement_order_id AND esod.data_status = 1
		ORDER BY esod.order_type ASC,esod.order_id ASC,statement_main.statement_expect_pay_time ASC,esod.statement_detail_phase ASC, esod.statement_expect_pay_time ASC, esod.id DESC
	</select>

	<select id="findByCustomerId" resultMap="StatementOrderDO" parameterType="java.lang.Integer">
		SELECT <include refid="column_List"/> FROM erp_statement_order eso
		WHERE eso.customer_id = #{customerId, jdbcType=INTEGER} AND eso.data_status = 1
		ORDER BY statement_expect_pay_time ASC
	</select>

	<select id="findByCustomerAndPayTime" resultMap="StatementOrderDO" parameterType="java.util.Map">
		SELECT <include refid="column_List"/> FROM erp_statement_order eso
		WHERE eso.customer_id = #{customerId, jdbcType=INTEGER} AND TO_DAYS(eso.statement_expect_pay_time) = TO_DAYS(#{payTime, jdbcType=TIMESTAMP}) AND eso.data_status = 1
		limit 1
	</select>

	<select id="listCount" resultType="java.lang.Integer" parameterType="map">
		SELECT count(eso.id) FROM erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		<where>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerName}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != ''">
				and eso.statement_order_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay == 1">
				and eso.statement_status in (0,4)
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isOverdue != null &amp;&amp; maps.statementOrderQueryParam.isOverdue == 1">
				<![CDATA[ and eso.statement_overdue_amount > 0 ]]>
			</if>
			<choose>
				<when test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != 1">
					and eso.statement_status = #{maps.statementOrderQueryParam.statementOrderStatus, jdbcType=INTEGER}
				</when>
				<otherwise>
					and eso.statement_status in (0,4,8,16,20)
				</otherwise>
			</choose>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayStartTime != null ">
				<![CDATA[ AND eso.statement_expect_pay_time >= #{maps.statementOrderQueryParam.statementExpectPayStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayEndTime != null">
				<![CDATA[ AND eso.statement_expect_pay_time <= #{maps.statementOrderQueryParam.statementExpectPayEndTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createStartTime != null">
				<![CDATA[ AND eso.create_time >= #{maps.statementOrderQueryParam.createStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createEndTime != null">
				<![CDATA[ AND eso.create_time <= #{maps.statementOrderQueryParam.createEndTime} ]]>
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
		</where>
	</select>

	<select id="listPage" resultMap="StatementOrderDO" parameterType="map">
		SELECT statement_main.*
		<trim prefix=",">
			<include refid="detail_column_List" />
		</trim>
		FROM
		(
			SELECT <include refid="column_List"/>
			<trim prefix=",">
				ec.customer_name AS customer_name
			</trim>
			<trim prefix=",">
				ec.customer_no AS customer_no
			</trim>
			FROM erp_statement_order eso
			INNER JOIN erp_customer ec on eso.customer_id = ec.id
			<where>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != ''">
					and eso.statement_order_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderNo}','%' )
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != ''">
					and ec.customer_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerNo}','%' )
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerId != null">
					and eso.customer_id = #{maps.statementOrderQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != ''">
					and ec.customer_name like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerName}','%' )
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay == 1">
					and eso.statement_status in (0,4)
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isOverdue != null &amp;&amp; maps.statementOrderQueryParam.isOverdue == 1">
					<![CDATA[ and eso.statement_overdue_amount > 0 ]]>
				</if>
				<choose>
					<when test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != 1">
						and eso.statement_status = #{maps.statementOrderQueryParam.statementOrderStatus, jdbcType=INTEGER}
					</when>
					<otherwise>
						and eso.statement_status in (0,4,8,16,20)
					</otherwise>
				</choose>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayStartTime != null ">
					<![CDATA[ AND eso.statement_expect_pay_time >= #{maps.statementOrderQueryParam.statementExpectPayStartTime} ]]>
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayEndTime != null ">
					<![CDATA[ AND eso.statement_expect_pay_time <= #{maps.statementOrderQueryParam.statementExpectPayEndTime} ]]>
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createStartTime != null">
					<![CDATA[ AND eso.create_time >= #{maps.statementOrderQueryParam.createStartTime} ]]>
				</if>
				<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createEndTime != null">
					<![CDATA[ AND eso.create_time <= #{maps.statementOrderQueryParam.createEndTime} ]]>
				</if>
				<if test="maps.isQueryAll == null">
					and eso.data_status = 1
				</if>
			</where>
			ORDER BY eso.statement_expect_pay_time
			LIMIT #{maps.start},#{maps.pageSize}
		) statement_main
		LEFT JOIN erp_statement_order_detail esod ON statement_main.id = esod.statement_order_id AND esod.data_status = 1
		ORDER BY statement_main.statement_expect_pay_time ASC, esod.statement_expect_pay_time ASC
	</select>

	<select id="listSaleCount" resultType="java.lang.Integer" parameterType="map">
		SELECT count(eso.id) FROM erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		INNER JOIN  erp_user owner_user on ec.owner = owner_user.id
		<where>
			<if test="maps.statementOrderIdList != null">
				AND eso.id IN
				<foreach item="statementOrderId" index="index" collection="maps.statementOrderIdList" open="(" separator="," close=")">
					#{statementOrderId}
				</foreach>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerName}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != ''">
				and eso.statement_order_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay == 1">
				and eso.statement_status in (0,4)
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isOverdue != null &amp;&amp; maps.statementOrderQueryParam.isOverdue == 1">
				<![CDATA[ and eso.statement_overdue_amount > 0 ]]>
			</if>
			<choose>
				<when test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != 1">
					and eso.statement_status = #{maps.statementOrderQueryParam.statementOrderStatus, jdbcType=INTEGER}
				</when>
				<otherwise>
					and eso.statement_status in (0,4,8,16,20)
				</otherwise>
			</choose>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayStartTime != null ">
				<![CDATA[ AND eso.statement_expect_pay_time >= #{maps.statementOrderQueryParam.statementExpectPayStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayEndTime != null">
				<![CDATA[ AND eso.statement_expect_pay_time <= #{maps.statementOrderQueryParam.statementExpectPayEndTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createStartTime != null">
				<![CDATA[ AND eso.create_time >= #{maps.statementOrderQueryParam.createStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createEndTime != null">
				<![CDATA[ AND eso.create_time <= #{maps.statementOrderQueryParam.createEndTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.ownerName != null &amp;&amp; maps.statementOrderQueryParam.ownerName != ''">
				and owner_user.real_name like CONCAT('%','${maps.statementOrderQueryParam.ownerName}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.subCompanyId != null">
				and ec.owner_sub_company_id = #{maps.statementOrderQueryParam.subCompanyId, jdbcType=INTEGER}
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
			<include refid="permission_sql.statement_order_control"/>
		</where>
	</select>

	<select id="listSalePage" resultMap="StatementOrderDO" parameterType="map">
		SELECT <include refid="column_List"/>
		<trim prefix=",">
			ec.customer_name AS customer_name
		</trim>
		<trim prefix=",">
			ec.customer_no AS customer_no
		</trim>
		<trim prefix=",">
			owner_user.real_name AS ownerName
		</trim>
		<trim prefix=",">
			ec.owner_sub_company_id AS ownerSubCompanyId
		</trim>
		<trim prefix=",">
			esc.sub_company_name AS ownerSubCompanyName
		</trim>
		FROM erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		INNER JOIN  erp_user owner_user on ec.owner = owner_user.id
		INNER JOIN erp_sub_company esc ON esc.id = ec.owner_sub_company_id AND esc.data_status = 1
		<where>
			<if test="maps.statementOrderIdList != null">
				AND eso.id IN
				<foreach item="statementOrderId" index="index" collection="maps.statementOrderIdList" open="(" separator="," close=")">
					#{statementOrderId}
				</foreach>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderNo != ''">
				and eso.statement_order_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like CONCAT('%','${maps.statementOrderQueryParam.statementOrderCustomerName}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay != null &amp;&amp; maps.statementOrderQueryParam.isNeedToPay == 1">
				and eso.statement_status in (0,4)
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.isOverdue != null &amp;&amp; maps.statementOrderQueryParam.isOverdue == 1">
				<![CDATA[ and eso.statement_overdue_amount > 0 ]]>
			</if>
			<choose>
				<when test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != null &amp;&amp; maps.statementOrderQueryParam.statementOrderStatus != 1">
					and eso.statement_status = #{maps.statementOrderQueryParam.statementOrderStatus, jdbcType=INTEGER}
				</when>
				<otherwise>
					and eso.statement_status in (0,4,8,16,20)
				</otherwise>
			</choose>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayStartTime != null ">
				<![CDATA[ AND eso.statement_expect_pay_time >= #{maps.statementOrderQueryParam.statementExpectPayStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.statementExpectPayEndTime != null ">
				<![CDATA[ AND eso.statement_expect_pay_time <= #{maps.statementOrderQueryParam.statementExpectPayEndTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createStartTime != null">
				<![CDATA[ AND eso.create_time >= #{maps.statementOrderQueryParam.createStartTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.createEndTime != null">
				<![CDATA[ AND eso.create_time <= #{maps.statementOrderQueryParam.createEndTime} ]]>
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.ownerName != null &amp;&amp; maps.statementOrderQueryParam.ownerName != ''">
				and owner_user.real_name like CONCAT('%','${maps.statementOrderQueryParam.ownerName}','%' )
			</if>
			<if test="maps.statementOrderQueryParam != null &amp;&amp; maps.statementOrderQueryParam.subCompanyId != null">
				and ec.owner_sub_company_id = #{maps.statementOrderQueryParam.subCompanyId, jdbcType=INTEGER}
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
			<include refid="permission_sql.statement_order_control"/>
		</where>
		ORDER BY eso.statement_expect_pay_time
		LIMIT #{maps.start},#{maps.pageSize}
	</select>

	<sql id="set_column_sql">
		<set>
			<if test="statementOrderNo != null">
				statement_order_no = #{statementOrderNo,jdbcType=VARCHAR},
			</if>
			<if test="customerId != null">
				customer_id = #{customerId,jdbcType=INTEGER},
			</if>
			<if test="statementExpectPayTime != null">
				statement_expect_pay_time = #{statementExpectPayTime,jdbcType=TIMESTAMP},
			</if>
			<if test="statementAmount != null">
				statement_amount = #{statementAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementOtherAmount != null">
				statement_other_amount = #{statementOtherAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementOtherPaidAmount != null">
				statement_other_paid_amount = #{statementOtherPaidAmount,jdbcType=DECIMAL},
			</if>
            <if test="statementRentDepositAmount != null">
                statement_rent_deposit_amount = #{statementRentDepositAmount, jdbcType=DECIMAL},
            </if>
            <if test="statementRentDepositPaidAmount != null">
                statement_rent_deposit_paid_amount = #{statementRentDepositPaidAmount, jdbcType=DECIMAL},
            </if>
            <if test="statementRentDepositReturnAmount != null">
                statement_rent_deposit_return_amount = #{statementRentDepositReturnAmount, jdbcType=DECIMAL},
            </if>
			<if test="statementDepositAmount != null">
				statement_deposit_amount = #{statementDepositAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementDepositPaidAmount != null">
				statement_deposit_paid_amount = #{statementDepositPaidAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementDepositReturnAmount != null">
				statement_deposit_return_amount = #{statementDepositReturnAmount,jdbcType=DECIMAL},
			</if>
            <if test="statementRentAmount != null">
                statement_rent_amount = #{statementRentAmount, jdbcType=DECIMAL},
            </if>
            <if test="statementRentPaidAmount != null">
                statement_rent_paid_amount = #{statementRentPaidAmount, jdbcType=DECIMAL},
            </if>
            <if test="statementPaidTime != null">
				statement_paid_time = #{statementPaidTime,jdbcType=TIMESTAMP},
            </if>
            <if test="statementOverdueAmount != null">
                statement_overdue_amount = #{statementOverdueAmount,jdbcType=DECIMAL},
            </if>
            <if test="statementOverduePaidAmount != null">
				statement_overdue_paid_amount = #{statementOverduePaidAmount,jdbcType=DECIMAL},
            </if>
			<if test="statementStatus != null">
				statement_status = #{statementStatus,jdbcType=INTEGER},
			</if>
			<if test="statementStartTime != null">
				statement_start_time = #{statementStartTime,jdbcType=TIMESTAMP},
			</if>
			<if test="statementEndTime != null">
				statement_end_time = #{statementEndTime,jdbcType=TIMESTAMP},
			</if>
			<if test="statementCorrectAmount != null">
				statement_correct_amount = #{statementCorrectAmount,jdbcType=DECIMAL},
			</if>
			<if test="dataStatus != null">
				data_status = #{dataStatus,jdbcType=INTEGER},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createUser != null">
				create_user = #{createUser,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateUser != null">
				update_user = #{updateUser,jdbcType=VARCHAR},
			</if>
			<if test="statementCouponAmount != null">
				statement_coupon_amount = #{statementCouponAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementPenaltyAmount != null">
				statement_penalty_amount = #{statementPenaltyAmount,jdbcType=DECIMAL},
			</if>
			<if test="statementPenaltyPaidAmount != null">
				statement_penalty_paid_amount = #{statementPenaltyPaidAmount,jdbcType=DECIMAL},
			</if>
		</set>
	</sql>

	<insert id="save" keyProperty="id" useGeneratedKeys="true" parameterType="com.lxzl.erp.dataaccess.domain.statement.StatementOrderDO">
		INSERT INTO erp_statement_order <include refid="set_column_sql"/>
	</insert>

	<update id="update" parameterType="com.lxzl.erp.dataaccess.domain.statement.StatementOrderDO">
		UPDATE erp_statement_order <include refid="set_column_sql"/> WHERE id = #{id, jdbcType=INTEGER}
	</update>

	<select id="listMonthCount" resultType="java.lang.Integer" parameterType="map">
		SELECT COUNT(test.total)
		FROM (
		SELECT
		COUNT(eso.customer_id) as total
		FROM
		erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		INNER JOIN  erp_user owner_user on ec.owner = owner_user.id
		<where>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderMonthQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerName}','%' )
			</if>
			<choose>
				<when test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.monthTime != null">
				and	 <![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m') = date_format( #{maps.statementOrderMonthQueryParam.monthTime}, '%Y-%m') ]]>
				</when>
				<otherwise>
				and	 <![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m') = date_format( now(), '%Y-%m') ]]>
				</otherwise>
			</choose>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != ''">
				and owner_user.real_name like CONCAT('%','${maps.statementOrderMonthQueryParam.ownerName}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.subCompanyId != null">
				and ec.owner_sub_company_id = #{maps.statementOrderMonthQueryParam.subCompanyId, jdbcType=INTEGER}
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
			<include refid="permission_sql.month_statement_order_control"/>
		</where>
		GROUP BY eso.customer_id) test

	</select>

	<select id="listMonthPage" resultMap="StatementOrderDO" parameterType="map">
		SELECT
		eso.customer_id,
		SUM(eso.statement_amount) as statement_amount,
		SUM(eso.statement_rent_deposit_amount) as statement_rent_deposit_amount,
		SUM(eso.statement_rent_deposit_paid_amount) as statement_rent_deposit_paid_amount,
		SUM(eso.statement_rent_deposit_return_amount) as statement_rent_deposit_return_amount,
		SUM(eso.statement_deposit_amount) as statement_deposit_amount,
		SUM(eso.statement_deposit_paid_amount) as statement_deposit_paid_amount,
		SUM(eso.statement_deposit_return_amount) as statement_deposit_return_amount,
		SUM(eso.statement_rent_amount) as statement_rent_amount,
		SUM(eso.statement_rent_paid_amount) as statement_rent_paid_amount,
		SUM(eso.statement_overdue_amount) as statement_overdue_amount,
		SUM(eso.statement_other_amount) as statement_other_amount,
		SUM(eso.statement_other_paid_amount) as statement_other_paid_amount,
		SUM(eso.statement_correct_amount) as statement_correct_amount,
		SUM(eso.statement_overdue_paid_amount) as statement_overdue_paid_amount,
		ec.customer_name AS customer_name,
		ec.customer_no AS customer_no
		<trim prefix=",">
			owner_user.real_name AS ownerName
		</trim>
		<trim prefix=",">
			ec.owner_sub_company_id AS ownerSubCompanyId
		</trim>
		<trim prefix=",">
			esc.sub_company_name AS ownerSubCompanyName
		</trim>
		FROM erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		INNER JOIN  erp_user owner_user on ec.owner = owner_user.id
		INNER JOIN erp_sub_company esc ON esc.id = ec.owner_sub_company_id AND esc.data_status = 1
		<where>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderMonthQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like
				CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerName}','%' )
			</if>
			<choose>
				<when test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.monthTime != null">
					and
					<![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m') = date_format( #{maps.statementOrderMonthQueryParam.monthTime}, '%Y-%m') ]]>
				</when>
				<otherwise>
					and <![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m') = date_format( now(), '%Y-%m') ]]>
				</otherwise>
			</choose>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != ''">
				and owner_user.real_name like CONCAT('%','${maps.statementOrderMonthQueryParam.ownerName}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.subCompanyId != null">
				and ec.owner_sub_company_id = #{maps.statementOrderMonthQueryParam.subCompanyId, jdbcType=INTEGER}
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
			<include refid="permission_sql.month_statement_order_control"/>
		</where>
		GROUP BY eso.customer_id
		LIMIT #{maps.start},#{maps.pageSize}
	</select>

	<select id="findByCustomerNo" resultMap="StatementOrderDO">
		SELECT statement_main.*
		<trim prefix=",">
			<include refid="detail_column_List"/>
		</trim>
		from
		(SELECT
		eso.customer_id,
		SUM(eso.statement_amount) as statement_amount,
		SUM(eso.statement_rent_deposit_amount) as statement_rent_deposit_amount,
		SUM(eso.statement_rent_deposit_paid_amount) as statement_rent_deposit_paid_amount,
		SUM(eso.statement_rent_deposit_return_amount) as statement_rent_deposit_return_amount,
		SUM(eso.statement_deposit_amount) as statement_deposit_amount,
		SUM(eso.statement_deposit_paid_amount) as statement_deposit_paid_amount,
		SUM(eso.statement_deposit_return_amount) as statement_deposit_return_amount,
		SUM(eso.statement_rent_amount) as statement_rent_amount,
		SUM(eso.statement_rent_paid_amount) as statement_rent_paid_amount,
		SUM(eso.statement_overdue_amount) as statement_overdue_amount,
		SUM(eso.statement_other_amount) as statement_other_amount,
		SUM(eso.statement_other_paid_amount) as statement_other_paid_amount,
		SUM(eso.statement_correct_amount) as statement_correct_amount,
		SUM(eso.statement_overdue_paid_amount) as statement_overdue_paid_amount,
		ec.customer_name AS customer_name,
		ec.customer_no AS customer_no
		FROM
		erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id

		WHERE
		date_format(eso.statement_expect_pay_time,'%Y-%m') = date_format(#{monthTime}, '%Y-%m')
		and eso.data_status=1
		and ec.customer_no = #{customerNo, jdbcType=VARCHAR}
		GROUP BY
		eso.customer_id) as statement_main
		LEFT JOIN erp_statement_order_detail esod ON statement_main.customer_id = esod.customer_id AND esod.data_status = 1
		where date_format(esod.statement_expect_pay_time,'%Y-%m') = date_format(#{monthTime} , '%Y-%m');

	</select>

	<delete id="realDeleteStatementOrderList">
		DELETE FROM erp_statement_order
		WHERE id in
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
			#{item.id,jdbcType=INTEGER}
		</foreach>
	</delete>

	<select id="exportListMonthPage" resultMap="CheckStatementOrderDO">
		select distinct t1.buyer_customer_id as customer_id,
		case when t2.customer_name is null then t1.buyer_customer_name else t2.customer_name end as customer_name,
		<![CDATA[ date_format(t0.month_config,'%Y-%m')]]>  as monthTime,case when t2.statementExpectPayTime is null then t0.month_start_config else t2.statementExpectPayTime end as statementExpectPayTime,t2.*
		from erp_month_config t0 left join erp_order t1 on t0.month_start_config between t1.rent_start_time and t1.expect_return_time or t0.month_end_config between t1.rent_start_time and t1.expect_return_time
		or date_format(t1.rent_start_time,'%Y-%m') = date_format(t0.month_config,'%Y-%m')
		or date_format(t1.expect_return_time,'%Y-%m') = date_format(t0.month_config,'%Y-%m')
		left join (
		SELECT
		eso.customer_id,
		<![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m')]]> AS monthTime,
		eso.statement_expect_pay_time as statementExpectPayTime,
		SUM(eso.statement_amount) as statement_amount,
		SUM(eso.statement_rent_deposit_amount) as statement_rent_deposit_amount,
		SUM(eso.statement_rent_deposit_paid_amount) as statement_rent_deposit_paid_amount,
		SUM(eso.statement_rent_deposit_return_amount) as statement_rent_deposit_return_amount,
		SUM(eso.statement_deposit_amount) as statement_deposit_amount,
		SUM(eso.statement_deposit_paid_amount) as statement_deposit_paid_amount,
		SUM(eso.statement_deposit_return_amount) as statement_deposit_return_amount,
		SUM(eso.statement_rent_amount) as statement_rent_amount,
		SUM(eso.statement_rent_paid_amount) as statement_rent_paid_amount,
		SUM(eso.statement_overdue_amount) as statement_overdue_amount,
		SUM(eso.statement_other_amount) as statement_other_amount,
		SUM(eso.statement_other_paid_amount) as statement_other_paid_amount,
		SUM(eso.statement_correct_amount) as statement_correct_amount,
		SUM(eso.statement_overdue_paid_amount) as statement_overdue_paid_amount,
		ec.customer_name AS customer_name,
		ec.customer_no AS customer_no
		<trim prefix=",">
			owner_user.real_name AS ownerName
		</trim>
		<trim prefix=",">
			ec.owner_sub_company_id AS ownerSubCompanyId
		</trim>
		<trim prefix=",">
			esc.sub_company_name AS ownerSubCompanyName
		</trim>
		FROM erp_statement_order eso
		INNER JOIN erp_customer ec on eso.customer_id = ec.id
		INNER JOIN  erp_user owner_user on ec.owner = owner_user.id
		INNER JOIN erp_sub_company esc ON esc.id = ec.owner_sub_company_id AND esc.data_status = 1
		<where>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerNo != ''">
				and ec.customer_no like CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerNo}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerId != null">
				and eso.customer_id = #{maps.statementOrderMonthQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerName != ''">
				and ec.customer_name like
				CONCAT('%','${maps.statementOrderMonthQueryParam.statementOrderCustomerName}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != null &amp;&amp; maps.statementOrderMonthQueryParam.ownerName != ''">
				and owner_user.real_name like CONCAT('%','${maps.statementOrderMonthQueryParam.ownerName}','%' )
			</if>
			<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.subCompanyId != null">
				and ec.owner_sub_company_id = #{maps.statementOrderMonthQueryParam.subCompanyId, jdbcType=INTEGER}
			</if>
			<if test="maps.isQueryAll == null">
				and eso.data_status = 1
			</if>
			<include refid="permission_sql.month_statement_order_control"/>
		</where>
		GROUP BY eso.customer_id, eso.statement_expect_pay_time,<![CDATA[ date_format(eso.statement_expect_pay_time,'%Y-%m')]]>
		ORDER BY eso.statement_expect_pay_time
		) t2 on t1.buyer_customer_id = t2.customer_id and t2.monthTime = date_format(t0.month_config,'%Y-%m')
		where t1.order_status in (8,12,16,20,22,24,32)
		<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderStartTime != null ">
			<![CDATA[ AND t0.month_config >= #{maps.statementOrderMonthQueryParam.statementOrderStartTime} ]]>
		</if>
		<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderEndTime != null ">
			<![CDATA[ AND t0.month_config <= #{maps.statementOrderMonthQueryParam.statementOrderEndTime} ]]>
		</if>
		<if test="maps.statementOrderMonthQueryParam != null &amp;&amp; maps.statementOrderMonthQueryParam.statementOrderCustomerId != null">
			and t1.buyer_customer_id = #{maps.statementOrderMonthQueryParam.statementOrderCustomerId, jdbcType=INTEGER}
		</if>
		and t1.id is not null order by monthTime desc
	</select>
</mapper>